# -*- coding: utf-8 -*-
"""Untitled16.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11Ez6LhaouAitNYDOXTXoZvJjp4oHTj_l
"""

import pandas as pd
from collections import OrderedDict

# Bayesian Node
class BayesianNode:
    def __init__(self, name, values, cpt):
        self.name = name
        self.values = values
        self.cpt = cpt
        self.parents = []
        self.children = []

    def add_parent(self, parent_node):
        self.parents.append(parent_node)

    def add_child(self, child_node):
        self.children.append(child_node)

# Bayesian Network
class BayesianNetwork:
    def __init__(self):
        self.nodes = OrderedDict()

    def add_node(self, node):
        self.nodes[node.name] = node

    def get_node(self, name):
        return self.nodes.get(name)

    def add_edge(self, parent_name, child_name):
        parent_node = self.get_node(parent_name)
        child_node = self.get_node(child_name)
        parent_node.add_child(child_node)
        child_node.add_parent(parent_node)

# Factor multiplication
def multiply_factors(factor1, factor2):
    factor1 = factor1.rename(columns={'p': 'p_x'})
    factor2 = factor2.rename(columns={'p': 'p_y'})
    common_vars = list(set(factor1.columns) & set(factor2.columns))
    merged_factor = pd.merge(factor1, factor2, on=common_vars)
    merged_factor['p'] = merged_factor['p_x'] * merged_factor['p_y']
    merged_factor = merged_factor.drop(columns=['p_x', 'p_y'])
    return merged_factor

# Eliminate variable
def eliminate_variable(factors, var):
    new_factors = []
    for factor in factors:
        if var in factor.columns:
            marginalized_factor = factor.groupby(factor.columns.difference([var]).tolist()).sum().reset_index()
            marginalized_factor = marginalized_factor.drop(columns=[var])
            new_factors.append(marginalized_factor)
        else:
            new_factors.append(factor)
    return new_factors


def variable_elimination(bn, query_var, evidence):
    factors = []
    for node_name, node in bn.nodes.items():
        factor = pd.DataFrame(node.cpt)
        for ev in evidence:
            if ev in factor.columns:
                factor = factor[factor[ev] == evidence[ev]]
        factors.append(factor)

    for node_name in bn.nodes.keys():
        if node_name != query_var and node_name not in evidence:
            factors = eliminate_variable(factors, node_name)

    result_factor = factors[0]
    for factor in factors[1:]:
        result_factor = multiply_factors(result_factor, factor)

    result_factor['p'] = result_factor['p'] / result_factor['p'].sum()
    return result_factor[[query_var, 'p']]


def setup_example_network():
    flu_cpt = pd.DataFrame({
        'Flu': ['T', 'F'],
        'p': [0.05, 0.95]
    })

    fever_cpt = pd.DataFrame({
        'Fever': ['T', 'F', 'T', 'F'],
        'Flu': ['T', 'T', 'F', 'F'],
        'p': [0.90, 0.10, 0.30, 0.70]
    })

    cough_cpt = pd.DataFrame({
        'Cough': ['T', 'F', 'T', 'F'],
        'Flu': ['T', 'T', 'F', 'F'],
        'p': [0.80, 0.20, 0.40, 0.60]
    })

    flu_node = BayesianNode("Flu", ['T', 'F'], flu_cpt)
    fever_node = BayesianNode("Fever", ['T', 'F'], fever_cpt)
    cough_node = BayesianNode("Cough", ['T', 'F'], cough_cpt)

    bn = BayesianNetwork()
    bn.add_node(flu_node)
    bn.add_node(fever_node)
    bn.add_node(cough_node)

    bn.add_edge("Flu", "Fever")
    bn.add_edge("Flu", "Cough")

    return bn

# Running the inference
if __name__ == "__main__":
    bn = setup_example_network()
    evidence = {'Fever': 'T'}
    result = variable_elimination(bn, 'Flu', evidence)
    print(result)

